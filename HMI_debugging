// Motor A
int motor1Pin1 = 27;
int motor1Pin2 = 26;
int enable1Pin = 14;

// Button Pins
int incrementButton = 32;
int decrementButton = 33;
int toggleButton = 34;
int oppositeButton = 35;

// PWM properties
const int freq = 30000;
const int pwmChannel = 0;
const int resolution = 8;
int dutyCycle = 200;

// Variables to store last movement
int lastDirection = 1; // 1 for forward, -1 for backward
int lastSpeed = 200;

void setup() {
    pinMode(motor1Pin1, OUTPUT);
    pinMode(motor1Pin2, OUTPUT);
    pinMode(enable1Pin, OUTPUT);
    pinMode(incrementButton, INPUT_PULLDOWN);
    pinMode(decrementButton, INPUT_PULLDOWN);
    pinMode(toggleButton, INPUT_PULLDOWN);
    pinMode(oppositeButton, INPUT_PULLDOWN);
    
    ledcSetup(pwmChannel, freq, resolution);
    ledcAttachPin(enable1Pin, pwmChannel);
    
    Serial.begin(115200);
}

void loop() {
    if (digitalRead(incrementButton) == HIGH) {
        dutyCycle = min(dutyCycle + 10, 255);
        Serial.print("Increasing speed: ");
        Serial.println(dutyCycle);
        moveMotor(lastDirection, dutyCycle);
        lastSpeed = dutyCycle;
        delay(300);
    }
    
    if (digitalRead(decrementButton) == HIGH) {
        dutyCycle = max(dutyCycle - 10, 0);
        Serial.print("Decreasing speed: ");
        Serial.println(dutyCycle);
        moveMotor(lastDirection, dutyCycle);
        lastSpeed = dutyCycle;
        delay(300);
    }
    
    if (digitalRead(toggleButton) == HIGH) {
        Serial.println("Repeating last movement");
        moveMotor(lastDirection, lastSpeed);
        delay(300);
    }
    
    if (digitalRead(oppositeButton) == HIGH) {
        lastDirection *= -1;
        Serial.println("Changing direction");
        moveMotor(lastDirection, dutyCycle);
        delay(300);
    }
}

void moveMotor(int direction, int speed) {
    if (direction == 1) {
        digitalWrite(motor1Pin1, LOW);
        digitalWrite(motor1Pin2, HIGH);
    } else {
        digitalWrite(motor1Pin1, HIGH);
        digitalWrite(motor1Pin2, LOW);
    }
    ledcWrite(pwmChannel, speed);
}
