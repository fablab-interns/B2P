#include <WiFi.h>
#include <WebServer.h>
#include <Bounce2.h>

// Function Prototype for ISR
void IRAM_ATTR readEncoder();

// Wi-Fi Credentials
const char* ssid = "FabLab UNIFY_2G";
const char* password = "Sarajevo2022#!";

// Web Server Setup
WebServer server(80);

// Motor control pins
#define IN1 19
#define IN2 18
#define ENA 5

// Encoder pins
#define ENCODER_C1 35
#define ENCODER_C2 34

// Button pins
#define BUTTON_DECREASE_BACKWARD_PIN 32  
#define BUTTON_DECREMENT_PIN 33
#define BUTTON_INCREMENT_PIN 25
#define BUTTON_TOGGLE_PIN 26  

// Variables
int fixedForwardSteps = 380;  
volatile long encoderCount = 0;
const int CPR = 28;
int motorSpeed = 150;  
bool motorRunning = false;
long targetSteps = 0;
int lastAction = 0;
unsigned long lastTime = 0;
float rpm = 0;

// Button Instances
Bounce decreaseBackwardButton = Bounce();
Bounce incrementButton = Bounce();
Bounce decrementButton = Bounce();
Bounce toggleButton = Bounce();

void setup() {
    Serial.begin(115200);
    
    // Motor Test
    Serial.println("Testing motor...");
    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
    analogWrite(ENA, 200);  // Set motor speed to medium
    delay(3000);            // Run motor for 3 seconds
    analogWrite(ENA, 0);
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, LOW);    // Stop motor
    Serial.println("Motor test complete!");

    Serial.begin(115200);
    pinMode(IN1, OUTPUT);
    pinMode(IN2, OUTPUT);
    pinMode(ENA, OUTPUT);
    pinMode(ENCODER_C1, INPUT);
    pinMode(ENCODER_C2, INPUT);
    pinMode(BUTTON_DECREASE_BACKWARD_PIN, INPUT_PULLUP);
    pinMode(BUTTON_INCREMENT_PIN, INPUT_PULLUP);
    pinMode(BUTTON_DECREMENT_PIN, INPUT_PULLUP);
    pinMode(BUTTON_TOGGLE_PIN, INPUT_PULLUP);
    
    decreaseBackwardButton.attach(BUTTON_DECREASE_BACKWARD_PIN);
    incrementButton.attach(BUTTON_INCREMENT_PIN);
    decrementButton.attach(BUTTON_DECREMENT_PIN);
    toggleButton.attach(BUTTON_TOGGLE_PIN);
    decreaseBackwardButton.interval(50);
    incrementButton.interval(50);
    decrementButton.interval(50);
    toggleButton.interval(50);
    
    analogWrite(ENA, 0);
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, LOW);
    attachInterrupt(digitalPinToInterrupt(ENCODER_C1), readEncoder, CHANGE);
    
    WiFi.mode(WIFI_STA);
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nConnected! IP Address: " + WiFi.localIP().toString());
    server.on("/", handleWebpage);
    server.on("/speed", handleSpeed);
    server.on("/encoder", handleEncoder);
    server.begin();
}

void loop() {
    server.handleClient();
    decreaseBackwardButton.update();
    incrementButton.update();
    decrementButton.update();
    toggleButton.update();
    calculateRPM();
}

void handleWebpage() {
    String html = "<html><head><title>Motor HMI</title><meta name='viewport' content='width=device-width, initial-scale=1'>";
    html += "<style>body{text-align:center; font-family:Arial;} button{font-size:20px; padding:15px; margin:10px;} input{font-size:20px;} .container{margin:20px;}</style></head>";
    html += "<body><h1>Motor Control Panel</h1>";
    html += "<div class='container'><p>Encoder Count: <span id='encoder'>0</span></p>";
    html += "<p>RPM: <span id='rpm'>0</span></p></div>";
    html += "<div class='container'><button onclick=\"sendRequest('/increment')\">Increment</button>";
    html += "<button onclick=\"sendRequest('/decrement')\">Decrement</button>";
    html += "<button onclick=\"sendRequest('/toggle')\">Repeat Last Motion</button>";
    html += "<button onclick=\"sendRequest('/stop')\">Stop</button></div>";
    html += "<div class='container'>Speed: <input type='range' min='50' max='255' value='150' onchange=\"sendRequest('/speed?value='+this.value)\">";
    html += "<input type='number' min='50' max='255' id='speedInput'><button onclick=\"setSpeed()\">Set Speed</button></div>";
    html += "<script>function sendRequest(route){ fetch(route); }";
    html += "function updateData(){ fetch('/encoder').then(res => res.text()).then(data => document.getElementById('encoder').innerText = data);";
    html += "fetch('/rpm').then(res => res.text()).then(data => document.getElementById('rpm').innerText = data); }";
    html += "function setSpeed(){ let val = document.getElementById('speedInput').value; if(val){ sendRequest('/speed?value='+val); }}";
    html += "setInterval(updateData, 500);</script></body></html>";
    server.send(200, "text/html", html);
}

void handleSpeed() {
    if (server.hasArg("value")) {
        motorSpeed = server.arg("value").toInt();
        analogWrite(ENA, motorSpeed);
    }
    server.send(200, "text/plain", "Speed Updated");
}

void handleEncoder() {
    server.send(200, "text/plain", String(encoderCount));
}

void calculateRPM() {
    unsigned long currentTime = millis();
    if (currentTime - lastTime >= 1000) {
        rpm = (encoderCount / CPR) * 60.0;
        encoderCount = 0;
        lastTime = currentTime;
    }
}

void IRAM_ATTR readEncoder() {
    encoderCount++;
}
