#define MotFwd  19  // Motor Forward pin
#define MotRev  21  // Motor Reverse pin

#define ButtonInc  32  // Increment button pin
#define ButtonDec  33  // Decrement button pin
#define ButtonRepeat  14  // Repeat button pin
#define ButtonRev  15  // Reverse button pin

int currentSpeed = 0; // Current motor speed (0-255)
int lastSpeed = 0;    // Last motor speed
int speedStep = 50;   // Speed increment/decrement step

void setup() {
  pinMode(MotFwd, OUTPUT);
  pinMode(MotRev, OUTPUT);
  Serial.begin(9600);

  pinMode(ButtonInc, INPUT_PULLUP);
  pinMode(ButtonDec, INPUT_PULLUP);
  pinMode(ButtonRepeat, INPUT_PULLUP);
  pinMode(ButtonRev, INPUT_PULLUP);

  // Ensure motor is off initially
  stopMotor();
  Serial.println("Motor control initialized.");
}

void loop() {
  // Check button states and perform actions
  if (digitalRead(ButtonInc) == LOW) {
    incrementSpeed();
    delay(200); // Debounce delay
  }

  if (digitalRead(ButtonDec) == LOW) {
    decrementSpeed();
    delay(200); // Debounce delay
  }

  if (digitalRead(ButtonRepeat) == LOW) {
    repeatLastSpeed();
    delay(200); // Debounce delay
  }

  if (digitalRead(ButtonRev) == LOW) {
    reverseMotor();
  } else {
    // If reverse button is not pressed, run motor forward at current speed
    runMotorForward(currentSpeed);
  }

  // Print current speed for debugging
  Serial.print("Current Speed: ");
  Serial.println(currentSpeed);

  delay(100); // Small delay for stability
}

void incrementSpeed() {
  currentSpeed += speedStep; // Increase speed by step size
  if (currentSpeed > 255) currentSpeed = 255; // Limit speed to maximum PWM value
  lastSpeed = currentSpeed; // Store last speed setting
  Serial.print("Incremented Speed to: ");
  Serial.println(currentSpeed);
}

void decrementSpeed() {
  currentSpeed -= speedStep; // Decrease speed by step size
  if (currentSpeed < -255) currentSpeed = -255; // Limit speed to minimum PWM value
  lastSpeed = currentSpeed; // Store last speed setting
  Serial.print("Decremented Speed to: ");
  Serial.println(currentSpeed);
}

void repeatLastSpeed() {
  currentSpeed = lastSpeed; // Repeat last speed setting
  Serial.print("Repeated Last Speed: ");
  Serial.println(currentSpeed);
}

void reverseMotor() {
  // Run motor in reverse at full speed while button is pressed
  analogWrite(MotFwd, 0); // Stop forward direction
  analogWrite(MotRev, 255); // Run reverse direction at full speed
  Serial.println("Motor running in reverse.");
}

void runMotorForward(int speed) {
  // Run motor forward at the specified speed
  if (speed > 0) {
    analogWrite(MotFwd, speed); // Set forward speed
    analogWrite(MotRev, 0); // Stop reverse direction
  } else if (speed < 0) {
    analogWrite(MotFwd, 0); // Stop forward direction
    analogWrite(MotRev, abs(speed)); // Set reverse speed
  } else {
    stopMotor(); // Stop motor if speed is 0
  }
}

void stopMotor() {
  // Stop the motor
  analogWrite(MotFwd, 0);
  analogWrite(MotRev, 0);
  Serial.println("Motor stopped.");
}
