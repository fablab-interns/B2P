#define MotFwd  19  // Motor Forward pin
#define MotRev  21  // Motor Reverse pin

#define ButtonInc  32  // Increment button pin
#define ButtonDec  33  // Decrement button pin

int encoderPin1 = 18; // Encoder Output 'A' (connected to interrupt pin)
int encoderPin2 = 5;  // Encoder Output 'B' (connected to interrupt pin)

volatile int lastEncoded = 0; // Stores previous state of encoder
volatile long encoderValue = 0; // Raw encoder value (counts pulses)

int moveAmount = 100;  // Number of pulses to move forward or backward

void setup() {
  pinMode(MotFwd, OUTPUT); 
  pinMode(MotRev, OUTPUT); 
  Serial.begin(9600); // Initialize serial communication

  pinMode(encoderPin1, INPUT_PULLUP); 
  pinMode(encoderPin2, INPUT_PULLUP);

  digitalWrite(encoderPin1, HIGH); // Enable pull-up resistors
  digitalWrite(encoderPin2, HIGH); // Enable pull-up resistors

  pinMode(ButtonInc, INPUT_PULLUP);
  pinMode(ButtonDec, INPUT_PULLUP);

  // Call updateEncoder() when any state change is detected on encoder pins
  attachInterrupt(digitalPinToInterrupt(encoderPin1), updateEncoder, CHANGE); 
  attachInterrupt(digitalPinToInterrupt(encoderPin2), updateEncoder, CHANGE);
}

void loop() {
  // Check for increment button press
  if (digitalRead(ButtonInc) == LOW) {
    moveForward();  // Move forward for a certain number of pulses
    delay(200); // Small delay to prevent multiple triggers
  }

  // Check for decrement button press
  if (digitalRead(ButtonDec) == LOW) {
    moveBackward();  // Move backward for a certain number of pulses
    delay(200); // Small delay to prevent multiple triggers
  }

  // Print encoder value for debugging
  Serial.print("Encoder value: ");
  Serial.println(encoderValue);

  delay(100); // Small delay for stability
}

void moveForward() {
  encoderValue = 0;  // Reset encoder value before starting the move
  digitalWrite(MotFwd, HIGH);  // Turn motor forward
  digitalWrite(MotRev, LOW);   // Make sure motor is not going in reverse

  // Move for the specified amount of pulses
  while (encoderValue < moveAmount) {
    // Wait until the desired encoder value is reached
    delay(10);
  }

  // Stop the motor after the specified number of pulses
  digitalWrite(MotFwd, LOW);
  Serial.println("Motor stopped after moving forward");
}

void moveBackward() {
  encoderValue = 0;  // Reset encoder value before starting the move
  digitalWrite(MotFwd, LOW);  // Make sure motor is not going forward
  digitalWrite(MotRev, HIGH); // Turn motor in reverse

  // Move for the specified amount of pulses
  while (encoderValue < moveAmount) {
    // Wait until the desired encoder value is reached
    delay(10);
  }

  // Stop the motor after the specified number of pulses
  digitalWrite(MotRev, LOW);
  Serial.println("Motor stopped after moving backward");
}

// Update encoder value based on changes in encoder signals
void updateEncoder() {
  int MSB = digitalRead(encoderPin1); // Read the most significant bit (A signal)
  int LSB = digitalRead(encoderPin2); // Read the least significant bit (B signal)

  int encoded = (MSB << 1) | LSB; // Combine both signals into a single value
  int sum = (lastEncoded << 2) | encoded; // Combine with the last encoder state

  // Increment or decrement encoder value based on rotation direction
  if (sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000) {
    encoderValue++; // If encoder rotates forward
  }
  if (sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011) {
    encoderValue--; // If encoder rotates backward
  }

  lastEncoded = encoded; // Store current state for next comparison
}
