#include <WiFi.h>
#include <WebServer.h>
#include <Bounce2.h>

// Function Prototype for ISR
void IRAM_ATTR readEncoder();  // âœ… Fix for "not declared in scope" error

// Wi-Fi Credentials
const char* ssid = "FabLab UNIFY_2G";
const char* password = "Sarajevo2022#!";

// Web Server Setup
WebServer server(80);

// Motor control pins (Changed to valid ESP32 GPIOs)
#define IN1 19
#define IN2 18
#define ENA 5  // PWM Speed control

// Encoder pins (ESP32 safe pins)
#define ENCODER_C1 35  // Input-only pin
#define ENCODER_C2 34  // Input-only pin

// Button pins (Changed to ESP32 safe pins)
#define BUTTON_DECREASE_BACKWARD_PIN 32  
#define BUTTON_DECREMENT_PIN 33
#define BUTTON_INCREMENT_PIN 25
#define BUTTON_TOGGLE_PIN 26  

// Variables
int fixedForwardSteps = 380;  
volatile long encoderCount = 0;
const int CPR = 28;
const int incrementSteps = 1 * CPR;
int motorSpeed = 150;  
bool motorRunning = false;
long targetSteps = 0;
int lastAction = 0;

// Button Instances
Bounce decreaseBackwardButton = Bounce();
Bounce incrementButton = Bounce();
Bounce decrementButton = Bounce();
Bounce toggleButton = Bounce();

void setup() {
    Serial.begin(115200);

    // Motor pins
    pinMode(IN1, OUTPUT);
    pinMode(IN2, OUTPUT);
    pinMode(ENA, OUTPUT);

    // Encoder pins
    pinMode(ENCODER_C1, INPUT);
    pinMode(ENCODER_C2, INPUT);

    // Button pins
    pinMode(BUTTON_DECREASE_BACKWARD_PIN, INPUT_PULLUP);
    pinMode(BUTTON_INCREMENT_PIN, INPUT_PULLUP);
    pinMode(BUTTON_DECREMENT_PIN, INPUT_PULLUP);
    pinMode(BUTTON_TOGGLE_PIN, INPUT_PULLUP);

    // Initialize Bounce
    decreaseBackwardButton.attach(BUTTON_DECREASE_BACKWARD_PIN);
    decreaseBackwardButton.interval(50);
    incrementButton.attach(BUTTON_INCREMENT_PIN);
    incrementButton.interval(50);
    decrementButton.attach(BUTTON_DECREMENT_PIN);
    decrementButton.interval(50);
    toggleButton.attach(BUTTON_TOGGLE_PIN);
    toggleButton.interval(50);

    // Stop motor initially
    analogWrite(ENA, 0);
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, LOW);

    // Attach Encoder Interrupt (Use IRAM_ATTR to prevent crashes)
    attachInterrupt(digitalPinToInterrupt(ENCODER_C1), readEncoder, CHANGE);

    // WiFi Setup
    WiFi.mode(WIFI_STA);
    WiFi.begin(ssid, password);
    Serial.print("Connecting to WiFi...");
    
    int retries = 0;
    while (WiFi.status() != WL_CONNECTED && retries < 20) {  
        delay(500);
        Serial.print(".");
        retries++;
    }
    
    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("\nConnected! IP Address: " + WiFi.localIP().toString());
        server.begin();
    } else {
        Serial.println("\nFailed to connect. Restarting ESP32...");
        ESP.restart();
    }

    // Web Routes
    server.on("/", handleWebpage);
    server.on("/increment", handleIncrement);
    server.on("/decrement", handleDecrement);
    server.on("/toggle", handleToggle);
    server.on("/stop", handleStop);
    server.on("/speed", handleSpeed);
    server.on("/encoder", handleEncoder);
    server.onNotFound([]() { server.send(404, "text/plain", "Not Found"); });
}

void loop() {
    server.handleClient();

    decreaseBackwardButton.update();
    incrementButton.update();
    decrementButton.update();
    toggleButton.update();

    if (incrementButton.fell() && !motorRunning) {
        targetSteps += incrementSteps;
        lastAction = 1;
        executeMotorMovement();
    }
    
    if (decrementButton.fell() && !motorRunning) {
        if (targetSteps >= incrementSteps) {
            targetSteps -= incrementSteps;
            lastAction = -1;
            executeMotorMovement();
        }
    }

    if (toggleButton.fell()) {
        if (!motorRunning) {
            targetSteps = fixedForwardSteps;
            executeMotorMovement();
        } else {
            stopMotor();
        }
    }

    if (decreaseBackwardButton.read() == LOW) {
        if (!motorRunning) {
            moveBackwardsContinuous();
        }
    } else {
        if (motorRunning) {
            stopMotor();
        }
    }
}

// **Webpage Handler**
void handleWebpage() {
    String html = "<html><head><title>Motor HMI</title><meta name='viewport' content='width=device-width, initial-scale=1'>";
    html += "<script>";
    html += "function sendRequest(route){ fetch(route); }";
    html += "function updateEncoder(){ fetch('/encoder').then(res => res.text()).then(data => document.getElementById('encoder').innerText = data); }";
    html += "setInterval(updateEncoder, 500);";
    html += "</script></head><body>";
    html += "<h1>Motor Control Panel</h1>";
    html += "<p>Encoder Count: <span id='encoder'>0</span></p>";
    html += "<button onclick=\"sendRequest('/increment')\">Increment</button>";
    html += "<button onclick=\"sendRequest('/decrement')\">Decrement</button>";
    html += "<button onclick=\"sendRequest('/toggle')\">Repeat Last Motion</button>";
    html += "<button onclick=\"sendRequest('/stop')\">Stop</button>";
    html += "<br><br>Speed: <input type='range' min='50' max='255' value='150' onchange=\"sendRequest('/speed?value='+this.value)\">";
    html += "</body></html>";
    server.send(200, "text/html", html);
}

// **Motor Control Handlers**
void handleIncrement() {
    targetSteps += incrementSteps;
    lastAction = 1;
    executeMotorMovement();
    server.send(200, "text/plain", "Incremented");
}

void handleDecrement() {
    if (targetSteps >= incrementSteps) {
        targetSteps -= incrementSteps;
        lastAction = -1;
        executeMotorMovement();
    }
    server.send(200, "text/plain", "Decremented");
}

void handleToggle() {
    if (lastAction == 1) {
        targetSteps += incrementSteps;
    } else if (lastAction == -1) {
        if (targetSteps >= incrementSteps) {
            targetSteps -= incrementSteps;
        }
    }
    executeMotorMovement();
    server.send(200, "text/plain", "Repeated Last Motion");
}

void handleStop() {
    stopMotor();
    server.send(200, "text/plain", "Stopped");
}

void handleSpeed() {
    if (server.hasArg("value")) {
        motorSpeed = server.arg("value").toInt();
        analogWrite(ENA, motorSpeed);
    }
    server.send(200, "text/plain", "Speed Updated");
}

void handleEncoder() {
    long safeEncoderCount;
    noInterrupts();
    safeEncoderCount = encoderCount;
    interrupts();

    server.send(200, "text/plain", String(safeEncoderCount));
}

// **Motor Execution Functions**
void executeMotorMovement() {
    encoderCount = 0;
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, HIGH);
    analogWrite(ENA, motorSpeed);
    motorRunning = true;

    while (encoderCount < targetSteps) {
        delay(1);
    }
    stopMotor();
}

void moveBackwardsContinuous() {
    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
    analogWrite(ENA, motorSpeed);
    motorRunning = true;
    delay(10);
}

void stopMotor() {
    analogWrite(ENA, 0);
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, LOW);
    motorRunning = false;
}

// **Encoder Interrupt**
void IRAM_ATTR readEncoder() {
    encoderCount++;
}
