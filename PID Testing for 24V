// for testing-------------------------------------------------
#include <SPI.h>
#include <PID_v1.h>

// MAX6675 connections
const int thermoDO = 12;
const int thermoCS = 10;
const int thermoCLK = 13;

// Heater control pin
const int heaterPin = 3;

// PID parameters
double setpoint = 100.0; // Desired temperature in Celsius
double input = 0.0;      // Current temperature
double output = 0.0;     // PID output

// PID tuning parameters
double Kp = 2.0;
double Ki = 5.0;
double Kd = 1.0;

// Create PID instance
PID myPID(&input, &output, &setpoint, Kp, Ki, Kd, DIRECT);

void setup() {
  // Initialize serial communication
  Serial.begin(9600);

  // Initialize MAX6675
  pinMode(thermoCS, OUTPUT);
  digitalWrite(thermoCS, HIGH);
  SPI.begin();

  // Initialize heater control pin
  pinMode(heaterPin, OUTPUT);

  // Set PWM frequency for heaterPin (D3) to ~980 Hz (default for pins 3 and 11)
  // No need to change TCCR2B register as default is already set to 64 prescaler

  // Initialize PID controller
  myPID.SetMode(AUTOMATIC);
  myPID.SetOutputLimits(0, 255); // PWM output limits
}

void loop() {
  // Read temperature from MAX6675
  input = readThermocouple();

  // Compute PID output
  myPID.Compute();

  // Apply PID output to heater using PWM
  analogWrite(heaterPin, output);

  // Debugging: print current temperature and PID output
  Serial.print("Temperature: ");
  Serial.print(input);
  Serial.print(" Â°C, PID Output: ");
  Serial.println(output);

  // Add a short delay before the next loop iteration
  delay(1000);
}

// Function to read temperature from MAX6675
double readThermocouple() {
  digitalWrite(thermoCS, LOW);
  delayMicroseconds(10);

  uint16_t v = SPI.transfer16(0x00);

  digitalWrite(thermoCS, HIGH);

  if (v & 0x4) {
    // Bit 2 indicates if the thermocouple is open
    return NAN;
  }

  v >>= 3; // Discard the lowest 3 bits
  return v * 0.25;
}
