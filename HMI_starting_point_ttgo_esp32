/* this is starting point code, with basic structure
  --> display initiated 
  --> created menu with three variables, speed, speed2, and temperature
  --> three buttons, scrolling through the menu. increasing and decreasing the value.
  --> faster refresh rate usig updateMenu() and updateVariables() functions to update just changed things instead of entire screen.
*/

#include <Adafruit_GFX.h>    
#include <Adafruit_ST7789.h> 
#include <SPI.h>

// Display Pins
#define TFT_MOSI  19
#define TFT_SCLK  18
#define TFT_CS    5
#define TFT_DC    16
#define TFT_RST   23
#define TFT_BL    4

// Button Pins
#define MENU_BUTTON    21   // Button to scroll through the menu
#define INCREASE_BUTTON 0   // Button to increase the value
#define DECREASE_BUTTON 35  // Button to decrease the value


// Initialize display
Adafruit_ST7789 tft = Adafruit_ST7789(TFT_CS, TFT_DC, TFT_MOSI, TFT_SCLK, TFT_RST);

// Menu items and variables
const char* menuItems[] = {"M1: Speed", "M2: Speed", "Temp: "};
int menuIndex = 0;
int speed = 150;
int speed2 = 0;
int temperature = 0;
bool buttonPressed = false;

// Previous values to track changes and prevent unnecessary updates
int lastSpeed = -1;
int lastSpeed2 = -1;
int lastTemperature = -1;
int lastMenuIndex = -1;

void setup() {
    Serial.begin(9600);

    pinMode(TFT_BL, OUTPUT);
    digitalWrite(TFT_BL, HIGH);

    pinMode(MENU_BUTTON, INPUT_PULLUP);
    pinMode(INCREASE_BUTTON, INPUT_PULLUP);
    pinMode(DECREASE_BUTTON, INPUT_PULLUP);  

    tft.init(135, 240);
    tft.setRotation(1);  // Landscape mode

    tft.fillScreen(ST77XX_BLACK);  // Clear screen only once
    updateMenu();  // Display initial menu selection
    updateValues();  // Display initial values
}

void loop() {
    handleButtons();
}

void handleButtons() {
    // Menu button: Change menu selection
    if (digitalRead(MENU_BUTTON) == LOW && !buttonPressed) {
        menuIndex = (menuIndex + 1) % 3;  // Cycle through menu items
        buttonPressed = true;
        updateMenu();  // Only update menu text (no flickering)
        delay(10);
    }
    
    // Increase button: Modify selected value
    if (digitalRead(INCREASE_BUTTON) == LOW && !buttonPressed) {
        if (menuIndex == 0) speed += 1;
        else if (menuIndex == 1) speed2 += 1;
        else if (menuIndex == 2) temperature += 50;
        buttonPressed = true;
        updateValues();  // Only update numbers (no flickering)
        delay(10);
    }
    
    // Decrease button: Modify selected value
    if (digitalRead(DECREASE_BUTTON) == LOW && !buttonPressed) {
        if (menuIndex == 0) speed -= 1;
        else if (menuIndex == 1) speed2 -= 1;
        else if (menuIndex == 2) temperature -= 50;
        buttonPressed = true;
        updateValues();  // Only update numbers (no flickering)
        delay(10);
    }
    
    // Reset buttonPressed state when buttons are released
    if (digitalRead(INCREASE_BUTTON) == HIGH && digitalRead(DECREASE_BUTTON) == HIGH && digitalRead(MENU_BUTTON) == HIGH) {
        buttonPressed = false;
    }
}

// Function to update the menu labels (without affecting values)
void updateMenu() {
    if (menuIndex == lastMenuIndex) return; // Skip if menu didn't change

    tft.setTextSize(2);

    for (int i = 0; i < 3; i++) {
        tft.setCursor(10, 20 + (i * 30));
        if (i == menuIndex) {
            tft.setTextColor(ST77XX_GREEN, ST77XX_BLACK);
        } else {
            tft.setTextColor(ST77XX_WHITE, ST77XX_BLACK);
        }
        tft.println(menuItems[i]);  // Print only the menu name (no values)
    }
    lastMenuIndex = menuIndex;
}

// Function to update only the numeric values (prevents flickering)
void updateValues() {
    if (speed != lastSpeed) {
        tft.fillRect(120, 20, 100, 20, ST77XX_BLACK); // Clear only the number area
        tft.setCursor(120, 20);
        tft.setTextColor(ST77XX_GREEN);
        tft.printf(" %d", speed);
        lastSpeed = speed;
    }

    if (speed2 != lastSpeed2) {
        tft.fillRect(120, 50, 100, 20, ST77XX_BLACK);
        tft.setCursor(120, 50);
        tft.setTextColor(ST77XX_GREEN);
        tft.printf(" %d", speed2);
        lastSpeed2 = speed2;
    }

    if (temperature != lastTemperature) {
        tft.fillRect(70, 80, 100, 20, ST77XX_BLACK);
        tft.setCursor(70, 80);
        tft.setTextColor(ST77XX_GREEN);
        tft.printf(" %dC", temperature);
        lastTemperature = temperature;
    }
}
