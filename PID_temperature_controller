// for testing-------------------------------------------------
#include "max6675.h"
#include "Fuzzy.h"

// MAX6675 (Thermocouple) Pins
#define MAX6675_CS 10
#define MAX6675_SO 12
#define MAX6675_SCK 13
#define HEATER_PWM_PIN 3

// System Constants
const float PWM_FREQUENCY = 490;  // Arduino Mega default PWM frequency
const float MIN_DUTY_CYCLE = 0.15; // Minimum duty cycle to ensure proper switching
const float MAX_DUTY_CYCLE = 0.95; // Maximum duty cycle to prevent overheating
const float MAX_TEMP_CHANGE_RATE = 5.0; // Â°C per second

// PID Parameters
float set_temperature = 200.0;
float kp = 5.0;    // Reduced for stability
float ki = 0.6;    // Reduced for less oscillation
float kd = 4.0;    // Increased for better damping

// Control Variables
float e_prev = 0;
float integral = 0;
float last_output = 0;
float last_temp = 0;
float lastValidTemp = 25.0;
float last_derivative = 0;
float max_change_rate = 20;
long prev_time = 0;
unsigned long lastTime = 0;

MAX6675 thermocouple(MAX6675_SCK, MAX6675_CS, MAX6675_SO);
Fuzzy fuzzy;

// Function to read temperature with error handling
float readTemperature() {
    float temperature = thermocouple.readCelsius();
    if (temperature > 0) {
        lastValidTemp = temperature;
        return temperature;
    } else {
        Serial.println("Invalid temperature detected, using last valid temperature.");
        return lastValidTemp;
    }
}

// Enhanced PID calculation with all modifications
float calculatePID(float temperature) {
    long current_time = millis();
    float deltaT = (current_time - prev_time) / 1000.0;
    prev_time = current_time;
    if (deltaT == 0) deltaT = 0.1;
    
    float error = set_temperature - temperature;
    
    // Improved integral reset
    if (abs(error) < 0.95) {
        integral = 0;
    }
    
    // Derivative filtering
    float derivative = (error - e_prev) / deltaT;
    derivative = 0.7 * derivative + 0.3 * last_derivative;  // Low-pass filter
    last_derivative = derivative;
    
    // Smooth Fuzzy kp Adjustment
    float new_kp = fuzzy.defuzzify(1);
    kp = 0.9 * kp + 0.1 * new_kp;
    
    // PID Calculation
    float P = kp * error;
    integral += error * deltaT;
    integral = constrain(integral, -255/ki, 255/ki);
    float I = ki * integral;
    float D = kd * derivative;
    
    e_prev = error;
    float output = P + I + D;
    
    // Scale output to compensate for non-linear MOSFET response
    output = pow(output/255.0, 1.2) * 255.0;
    
    // Apply minimum and maximum duty cycle constraints
    if (output > 0) {
        output = map(output, 0, 255, 
                    MIN_DUTY_CYCLE * 255, 
                    MAX_DUTY_CYCLE * 255);
    }
    
    // Rate limiting
    float output_change = output - last_output;
    output_change = constrain(output_change, -max_change_rate, max_change_rate);
    output = last_output + output_change;
    last_output = output;
    
    return constrain(output, 0, 255);
}

void setup() {
    Serial.begin(115200);
    pinMode(HEATER_PWM_PIN, OUTPUT);
    Serial.println("Enhanced Heating System Started...");
}

void loop() {
    float temperature = readTemperature();
    
    // Monitor temperature change rate
    float deltaT = (millis() - lastTime) / 1000.0;
    float temp_change_rate = abs(temperature - last_temp) / deltaT;
    
    // Calculate heater power
    float heaterPower = calculatePID(temperature);
    
    // Reduce power if temperature is changing too quickly
    if (temp_change_rate > MAX_TEMP_CHANGE_RATE) {
        heaterPower *= 0.8;
    }
    
    // Apply control signal
    analogWrite(HEATER_PWM_PIN, heaterPower);
    
    // Debug output
    Serial.print(temperature);
    Serial.print(",");
    Serial.println(heaterPower);
    
    // Update historical values
    last_temp = temperature;
    lastTime = millis();
    
    delay(600); // Sampling period
}







// ------------------------------------------------ PID CONTROLLER WITH FUZZY LOGIC 12V ----------------------------------------------------------------
#include "max6675.h"
#include "Fuzzy.h"

// MAX6675 (Thermocouple) Pins
#define MAX6675_CS 10
#define MAX6675_SO 12
#define MAX6675_SCK 13
#define HEATER_PWM_PIN 3

MAX6675 thermocouple(MAX6675_SCK, MAX6675_CS, MAX6675_SO);

// PID Gains
float set_temperature = 200.0;
float kp = 9.88, ki = 1.23, kd = 2.7;  // Increased kd to reduce oscillations
float e_prev = 0, integral = 0;
long prev_time = 0;

// Last valid temperature reading
float lastValidTemp = 25.0;

Fuzzy fuzzy;

// Function to read temperature (with error handling)
float readTemperature() {
    float temperature = thermocouple.readCelsius();
    if (temperature > 0) {
        lastValidTemp = temperature;  // Store valid reading
        return temperature;
    } else {
        Serial.println(" Invalid temperature detected, using last valid temperature.");
        return lastValidTemp;  // Use last valid temperature
    }
}

// PID Calculation (Fully Dynamic, No Fixed Values)
float calculatePID(float temperature) {
    long current_time = millis();
    float deltaT = (current_time - prev_time) / 1000.0;
    prev_time = current_time;
    if (deltaT == 0) deltaT = 0.1;

    float error = set_temperature - temperature;

    // Improved Integral Reset (Less Aggressive)
    if (abs(error) < 0.95) {
        integral = 0;  
    }

    // Smooth Fuzzy kp Adjustment (Prevents Sudden Jumps)
    float new_kp = fuzzy.defuzzify(1);
    kp = 1 * kp + 0.1 * new_kp;

    // PID Calculation
    float P = kp * error;
    integral += error * deltaT;
    integral = constrain(integral, -255 / ki, 255 / ki);
    float I = ki * integral;
    float D = kd * (error - e_prev) / deltaT;
    e_prev = error;

    float output = P + I + D;
    return constrain(output, 0, 255);
}

void setup() {
    Serial.begin(115200);
    pinMode(HEATER_PWM_PIN, OUTPUT);
    Serial.println(" Heating System Started...");
}

void loop() {
    float temperature = readTemperature();
    float heaterPower = calculatePID(temperature);

    analogWrite(HEATER_PWM_PIN, heaterPower);

    Serial.print(temperature);
    Serial.print(",");
    Serial.println(heaterPower);

    delay(600);  // Faster updates
}
