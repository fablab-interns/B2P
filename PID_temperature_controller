// PID CONTROLLER------------------------------------------------------------------------

#include "max6675.h" 

#define MAX6675_CS 10  // Chip Select
#define MAX6675_SO 12  // Data Out
#define MAX6675_SCK 13 // Clock
#define HEATER_PWM_PIN 3  // HW532 MOSFET Control Pin

// Initialize MAX6675
MAX6675 thermocouple(MAX6675_SCK, MAX6675_CS, MAX6675_SO);

// PID Constants (Tune these!)
float set_temperature = 200.0; // Target Temperature
float kp = 10.0;  // Proportional Gain
float ki = 1.5;   // Integral Gain
float kd = 0.8;   // Derivative Gain

float e_prev = 0, integral = 0;
long prev_time = 0;

// Function to read temperature from the MAX6675 module
float readTemperature() {
    float temperature = thermocouple.readCelsius();
    if (temperature < 0) {
        Serial.println("Error: Check Thermocouple Connection!");
        return 0.0;  // Return 0 to avoid PID instability
    }
    return temperature;
}

// PID function to calculate heater power
float calculatePID(float temperature) {
    long current_time = millis();
    float deltaT = (current_time - prev_time) / 1000.0;  // Convert ms to seconds
    prev_time = current_time;

    if (deltaT == 0) deltaT = 0.01; // Prevent division by zero

    // Calculate Error
    float error = set_temperature - temperature;

    // Proportional Term
    float P = kp * error;

    // Integral Term (with anti-windup)
    integral += error * deltaT;
    integral = constrain(integral, -255 / ki, 255 / ki);  // Prevents integral windup
    float I = ki * integral;

    // Derivative Term
    float D = kd * (error - e_prev) / deltaT;
    e_prev = error;

    // PID Output (Heater Power)
    float output = P + I + D;

    // Limit output to 0-255 (PWM range)
    output = constrain(output, 0, 255);
    
    return output;
}

void setup() {
    Serial.begin(115200);
    pinMode(HEATER_PWM_PIN, OUTPUT);
    
    Serial.println("System Initializing...");
    delay(2000); // Allow MAX6675 to stabilize
}

void loop() {
    float temperature = readTemperature();
    Serial.print("Current Temperature: ");
    Serial.println(temperature);

    float heaterPower = calculatePID(temperature);
    analogWrite(HEATER_PWM_PIN, heaterPower); // Apply PWM to HW532

    Serial.print("PWM Output: ");
    Serial.println(heaterPower);

    delay(1000); // Adjust loop timing for stability
}









// ------------------------------------------------ CONTROLLER WITH FUZZY LOGIC ----------------------------------------------------------------

#include "max6675.h"
#include "Fuzzy.h"

// MAX6675 (Thermocouple) Pins
#define MAX6675_CS 10
#define MAX6675_SO 12
#define MAX6675_SCK 13
#define HEATER_PWM_PIN 3

MAX6675 thermocouple(MAX6675_SCK, MAX6675_CS, MAX6675_SO);

// PID Gains
float set_temperature = 200.0;
float kp = 9.65, ki = 1.0, kd = 2.65;
float e_prev = 0, integral = 0;
long prev_time = 0;

// Last valid temperature reading
float lastValidTemp = 25.0;

Fuzzy fuzzy;

// Function to read temperature (with error handling)
float readTemperature() {
    float temperature = thermocouple.readCelsius();
    if (temperature > 0) {
        lastValidTemp = temperature;  // Store valid reading
        return temperature;
    } else {
        Serial.println("⚠️ Invalid temperature detected, using last valid temperature.");
        return lastValidTemp;  // Use last valid temperature
    }
}

// PID Calculation (with hysteresis & integral reset)
float calculatePID(float temperature) {
    long current_time = millis();
    float deltaT = (current_time - prev_time) / 1000.0;
    prev_time = current_time;
    if (deltaT == 0) deltaT = 0.01;

    float error = set_temperature - temperature;

    // 🔥 Ensure the heater stops heating when reaching 202°C
    if (temperature >= set_temperature + 2) {
        return 0; // Stop heating
    }

    // 🔥 Fix Integral Windup (reset integral when near setpoint)
    if (abs(error) < 2) {
        integral = 0;
    }

    // Apply Fuzzy Logic to Adjust kp
    fuzzy.setInput(1, error);
    fuzzy.fuzzify();
    kp = fuzzy.defuzzify(1);

    // PID Calculation
    float P = kp * error;
    integral += error * deltaT;
    integral = constrain(integral, -255 / ki, 255 / ki);
    float I = ki * integral;
    float D = kd * (error - e_prev) / deltaT;
    e_prev = error;

    float output = P + I + D;
    return constrain(output, 0, 255);
}

void setup() {
    Serial.begin(115200);
    pinMode(HEATER_PWM_PIN, OUTPUT);
    Serial.println("🔥 Heating System Started...");
}

void loop() {
    float temperature = readTemperature();
    Serial.print("Current Temperature: ");
    Serial.println(temperature);

    float heaterPower = calculatePID(temperature);

    // 🔥 Ensure the heater turns OFF when needed
    if (heaterPower <= 5) {
        analogWrite(HEATER_PWM_PIN, 0); // Fully turn off heater
    } else {
        analogWrite(HEATER_PWM_PIN, heaterPower);
    }

    Serial.print("PWM Output: ");
    Serial.println(heaterPower);
    delay(1000);
}
