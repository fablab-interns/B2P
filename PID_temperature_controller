// for testing-------------------------------------------------
#include "max6675.h"
#include "Fuzzy.h"

// MAX6675 (Thermocouple) Pins
#define MAX6675_CS 10
#define MAX6675_SO 12
#define MAX6675_SCK 13
#define HEATER_PWM_PIN 3

// System Constants
const float SET_TEMPERATURE = 200.0;
const int SAMPLE_TIME = 100;  // Reduced sample time to 100ms for faster response

// PID Parameters - More aggressive tuning
float kp = 25.0;   // Increased for faster response
float ki = 0.15;   // Reduced to prevent integral windup
float kd = 40.0;   // Increased for better damping

// Control Variables
float lastTemp = 0;
float integral = 0;
float lastError = 0;
unsigned long lastTime = 0;

MAX6675 thermocouple(MAX6675_SCK, MAX6675_CS, MAX6675_SO);

float readTemperature() {
    float temp = thermocouple.readCelsius();
    return (temp > 0) ? temp : lastTemp;
}

float calculatePID(float currentTemp) {
    unsigned long now = millis();
    float deltaTime = (now - lastTime) / 1000.0;
    if (deltaTime <= 0) deltaTime = 0.1;
    
    // Calculate error
    float error = SET_TEMPERATURE - currentTemp;
    
    // Proportional term
    float P = kp * error;
    
    // Integral term with anti-windup
    integral += (ki * error * deltaTime);
    integral = constrain(integral, -40, 40);  // Limit integral term
    float I = integral;
    
    // Derivative term on measurement, not error
    float dTemp = (currentTemp - lastTemp) / deltaTime;
    float D = -kd * dTemp;  // Negative because we want to resist change
    
    // Calculate output with direct mapping to PWM range
    float output = P + I + D;
    
    // Update stored values
    lastTemp = currentTemp;
    lastTime = now;
    
    // Map output to PWM range with deadband elimination
    if (abs(output) < 5) output = 0;  // Small deadband to prevent noise
    output = constrain(output, 0, 255);
    
    return output;
}

void setup() {
    Serial.begin(115200);
    pinMode(HEATER_PWM_PIN, OUTPUT);
    analogWrite(HEATER_PWM_PIN, 0);
    delay(1000);  // Stabilization delay
    Serial.println("Temperature,Output,Error");
}

void loop() {
    float temperature = readTemperature();
    float output = calculatePID(temperature);
    
    // Apply control signal
    analogWrite(HEATER_PWM_PIN, output);
    
    // Debug output
    Serial.print(temperature);
    Serial.print(",");
    Serial.print(output);
    Serial.print(",");
    Serial.println(SET_TEMPERATURE - temperature);
    
    delay(SAMPLE_TIME);
}







// ------------------------------------------------ PID CONTROLLER WITH FUZZY LOGIC 12V ----------------------------------------------------------------
#include "max6675.h"
#include "Fuzzy.h"

// MAX6675 (Thermocouple) Pins
#define MAX6675_CS 10
#define MAX6675_SO 12
#define MAX6675_SCK 13
#define HEATER_PWM_PIN 3

MAX6675 thermocouple(MAX6675_SCK, MAX6675_CS, MAX6675_SO);

// PID Gains
float set_temperature = 200.0;
float kp = 9.88, ki = 1.23, kd = 2.7;  // Increased kd to reduce oscillations
float e_prev = 0, integral = 0;
long prev_time = 0;

// Last valid temperature reading
float lastValidTemp = 25.0;

Fuzzy fuzzy;

// Function to read temperature (with error handling)
float readTemperature() {
    float temperature = thermocouple.readCelsius();
    if (temperature > 0) {
        lastValidTemp = temperature;  // Store valid reading
        return temperature;
    } else {
        Serial.println(" Invalid temperature detected, using last valid temperature.");
        return lastValidTemp;  // Use last valid temperature
    }
}

// PID Calculation (Fully Dynamic, No Fixed Values)
float calculatePID(float temperature) {
    long current_time = millis();
    float deltaT = (current_time - prev_time) / 1000.0;
    prev_time = current_time;
    if (deltaT == 0) deltaT = 0.1;

    float error = set_temperature - temperature;

    // Improved Integral Reset (Less Aggressive)
    if (abs(error) < 0.95) {
        integral = 0;  
    }

    // Smooth Fuzzy kp Adjustment (Prevents Sudden Jumps)
    float new_kp = fuzzy.defuzzify(1);
    kp = 1 * kp + 0.1 * new_kp;

    // PID Calculation
    float P = kp * error;
    integral += error * deltaT;
    integral = constrain(integral, -255 / ki, 255 / ki);
    float I = ki * integral;
    float D = kd * (error - e_prev) / deltaT;
    e_prev = error;

    float output = P + I + D;
    return constrain(output, 0, 255);
}

void setup() {
    Serial.begin(115200);
    pinMode(HEATER_PWM_PIN, OUTPUT);
    Serial.println(" Heating System Started...");
}

void loop() {
    float temperature = readTemperature();
    float heaterPower = calculatePID(temperature);

    analogWrite(HEATER_PWM_PIN, heaterPower);

    Serial.print(temperature);
    Serial.print(",");
    Serial.println(heaterPower);

    delay(600);  // Faster updates
}
