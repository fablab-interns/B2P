



// ------------------------------------------------ CONTROLLER WITH FUZZY LOGIC ----------------------------------------------------------------

#include "max6675.h"
#include "Fuzzy.h"

// MAX6675 (Thermocouple) Pins
#define MAX6675_CS 10
#define MAX6675_SO 12
#define MAX6675_SCK 13
#define HEATER_PWM_PIN 3

MAX6675 thermocouple(MAX6675_SCK, MAX6675_CS, MAX6675_SO);

// PID Gains
float set_temperature = 200.0;
float kp = 9.65, ki = 1.2, kd = 2.65;  // Increased ki for faster heating
float e_prev = 0, integral = 0;
long prev_time = 0;

// Last valid temperature reading
float lastValidTemp = 25.0;

Fuzzy fuzzy;

// Function to read temperature (with error handling)
float readTemperature() {
    float temperature = thermocouple.readCelsius();
    if (temperature > 0) {
        lastValidTemp = temperature;  // Store valid reading
        return temperature;
    } else {
        Serial.println("‚ö†Ô∏è Invalid temperature detected, using last valid temperature.");
        return lastValidTemp;  // Use last valid temperature
    }
}

// PID Calculation (FULL CONTROL, NO FIXED VALUES)
float calculatePID(float temperature) {
    long current_time = millis();
    float deltaT = (current_time - prev_time) / 1000.0;
    prev_time = current_time;
    if (deltaT == 0) deltaT = 0.01;

    float error = set_temperature - temperature;

    // üî• Full PID Control, No Fixed Values
    if (abs(error) < 2) {
        integral = 0;  // Reset integral windup when near setpoint
    }

    // Apply Fuzzy Logic to Adjust kp
    fuzzy.setInput(1, error);
    fuzzy.fuzzify();
    kp = fuzzy.defuzzify(1);

    // PID Calculation
    float P = kp * error;
    integral += error * deltaT;
    integral = constrain(integral, -255 / ki, 255 / ki);
    float I = ki * integral;
    float D = kd * (error - e_prev) / deltaT;
    e_prev = error;

    float output = P + I + D;
    return constrain(output, 0, 255);
}

void setup() {
    Serial.begin(115200);
    pinMode(HEATER_PWM_PIN, OUTPUT);
    Serial.println("üî• Heating System Started...");
}

void loop() {
    float temperature = readTemperature();
    float heaterPower = calculatePID(temperature);

    // üî• Full PID Control: Let it decide when to turn on/off
    analogWrite(HEATER_PWM_PIN, heaterPower);

    // üìà FIXED Serial Plotter Output (Temperature, PWM)
    Serial.print(temperature);
    Serial.print(",");
    Serial.println(heaterPower);

    delay(500); // Faster update for smoother plot
}
