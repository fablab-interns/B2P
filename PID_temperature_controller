// for testing-------------------------------------------------
#include "max6675.h"
#include "Fuzzy.h"

// MAX6675 (Thermocouple) Pins
#define MAX6675_CS 10
#define MAX6675_SO 12
#define MAX6675_SCK 13
#define HEATER_PWM_PIN 3

MAX6675 thermocouple(MAX6675_SCK, MAX6675_CS, MAX6675_SO);

// PID Gains (Adjusted values)
float set_temperature = 200.0;
float kp = 5.0, ki = 0.5, kd = 5.0;  // Retuned gains
float e_prev = 0, integral = 0;
long prev_time = 0;

// Last valid temperature reading
float lastValidTemp = 25.0;

// Moving average filter for temperature readings
#define FILTER_SIZE 5
float tempBuffer[FILTER_SIZE];
uint8_t index = 0;

Fuzzy fuzzy;

// Function to read temperature (with error handling and filtering)
float readTemperature() {
    float temperature = thermocouple.readCelsius();
    if (temperature > 0) {
        tempBuffer[index] = temperature;
        index = (index + 1) % FILTER_SIZE;
        float avg = 0;
        for (uint8_t i = 0; i < FILTER_SIZE; i++) {
            avg += tempBuffer[i];
        }
        lastValidTemp = avg / FILTER_SIZE;  // Store filtered temperature
        return lastValidTemp;
    } else {
        Serial.println(" Invalid temperature detected, using last valid temperature.");
        return lastValidTemp;  // Use last valid temperature
    }
}

// PID Calculation with Anti-Windup and Fuzzy Logic Adjustment
float calculatePID(float temperature) {
    long current_time = millis();
    float deltaT = (current_time - prev_time) / 1000.0;
    prev_time = current_time;
    deltaT = max(deltaT, 0.001);  // Avoid division by zero

    float error = set_temperature - temperature;

    // Anti-Windup: Reset integral if output saturates
    float output = kp * error + ki * integral + kd * (error - e_prev) / deltaT;
    if (output >= 255) {
        integral = (255 - kp * error - kd * (error - e_prev) / deltaT) / ki;
    } else if (output <= 0) {
        integral = (-kp * error - kd * (error - e_prev) / deltaT) / ki;
    } else {
        integral += error * deltaT;  // Normal integral accumulation
    }

    // Smooth Fuzzy kp Adjustment (Reduced impact)
    float new_kp = fuzzy.defuzzify(1);
    kp = 0.95 * kp + 0.05 * new_kp;  // Smoother transition for kp

    e_prev = error;
    return constrain(output, 0, 255);
}

void setup() {
    Serial.begin(115200);
    pinMode(HEATER_PWM_PIN, OUTPUT);

    // Increase PWM frequency for Pin 3 (Heater) to ~31kHz
    TCCR3B = (TCCR3B & 0xF8) | 0x01;

    // Initialize temperature buffer
    for (uint8_t i = 0; i < FILTER_SIZE; i++) {
        tempBuffer[i] = lastValidTemp;
    }

    Serial.println(" Heating System Started...");
}

void loop() {
    float temperature = readTemperature();
    float heaterPower = calculatePID(temperature);

    analogWrite(HEATER_PWM_PIN, heaterPower);

    // Serial output for debugging
    Serial.print("Temperature: ");
    Serial.print(temperature);
    Serial.print(", Heater Power: ");
    Serial.println(heaterPower);

    delay(100);  // Faster updates for better control
}







// ------------------------------------------------ PID CONTROLLER WITH FUZZY LOGIC 12V ----------------------------------------------------------------
#include "max6675.h"
#include "Fuzzy.h"

// MAX6675 (Thermocouple) Pins
#define MAX6675_CS 10
#define MAX6675_SO 12
#define MAX6675_SCK 13
#define HEATER_PWM_PIN 3

MAX6675 thermocouple(MAX6675_SCK, MAX6675_CS, MAX6675_SO);

// PID Gains
float set_temperature = 200.0;
float kp = 9.88, ki = 1.23, kd = 2.7;  // Increased kd to reduce oscillations
float e_prev = 0, integral = 0;
long prev_time = 0;

// Last valid temperature reading
float lastValidTemp = 25.0;

Fuzzy fuzzy;

// Function to read temperature (with error handling)
float readTemperature() {
    float temperature = thermocouple.readCelsius();
    if (temperature > 0) {
        lastValidTemp = temperature;  // Store valid reading
        return temperature;
    } else {
        Serial.println(" Invalid temperature detected, using last valid temperature.");
        return lastValidTemp;  // Use last valid temperature
    }
}

// PID Calculation (Fully Dynamic, No Fixed Values)
float calculatePID(float temperature) {
    long current_time = millis();
    float deltaT = (current_time - prev_time) / 1000.0;
    prev_time = current_time;
    if (deltaT == 0) deltaT = 0.1;

    float error = set_temperature - temperature;

    // Improved Integral Reset (Less Aggressive)
    if (abs(error) < 0.95) {
        integral = 0;  
    }

    // Smooth Fuzzy kp Adjustment (Prevents Sudden Jumps)
    float new_kp = fuzzy.defuzzify(1);
    kp = 1 * kp + 0.1 * new_kp;

    // PID Calculation
    float P = kp * error;
    integral += error * deltaT;
    integral = constrain(integral, -255 / ki, 255 / ki);
    float I = ki * integral;
    float D = kd * (error - e_prev) / deltaT;
    e_prev = error;

    float output = P + I + D;
    return constrain(output, 0, 255);
}

void setup() {
    Serial.begin(115200);
    pinMode(HEATER_PWM_PIN, OUTPUT);
    Serial.println(" Heating System Started...");
}

void loop() {
    float temperature = readTemperature();
    float heaterPower = calculatePID(temperature);

    analogWrite(HEATER_PWM_PIN, heaterPower);

    Serial.print(temperature);
    Serial.print(",");
    Serial.println(heaterPower);

    delay(600);  // Faster updates
}
