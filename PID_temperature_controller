// PID CONTROLLER------------------------------------------------------------------------

#include "max6675.h" 

#define MAX6675_CS 10  // Chip Select
#define MAX6675_SO 12  // Data Out
#define MAX6675_SCK 13 // Clock
#define HEATER_PWM_PIN 3  // HW532 MOSFET Control Pin

// Initialize MAX6675
MAX6675 thermocouple(MAX6675_SCK, MAX6675_CS, MAX6675_SO);

// PID Constants (Tune these!)
float set_temperature = 200.0; // Target Temperature
float kp = 10.0;  // Proportional Gain
float ki = 1.5;   // Integral Gain
float kd = 0.8;   // Derivative Gain

float e_prev = 0, integral = 0;
long prev_time = 0;

// Function to read temperature from the MAX6675 module
float readTemperature() {
    float temperature = thermocouple.readCelsius();
    if (temperature < 0) {
        Serial.println("Error: Check Thermocouple Connection!");
        return 0.0;  // Return 0 to avoid PID instability
    }
    return temperature;
}

// PID function to calculate heater power
float calculatePID(float temperature) {
    long current_time = millis();
    float deltaT = (current_time - prev_time) / 1000.0;  // Convert ms to seconds
    prev_time = current_time;

    if (deltaT == 0) deltaT = 0.01; // Prevent division by zero

    // Calculate Error
    float error = set_temperature - temperature;

    // Proportional Term
    float P = kp * error;

    // Integral Term (with anti-windup)
    integral += error * deltaT;
    integral = constrain(integral, -255 / ki, 255 / ki);  // Prevents integral windup
    float I = ki * integral;

    // Derivative Term
    float D = kd * (error - e_prev) / deltaT;
    e_prev = error;

    // PID Output (Heater Power)
    float output = P + I + D;

    // Limit output to 0-255 (PWM range)
    output = constrain(output, 0, 255);
    
    return output;
}

void setup() {
    Serial.begin(115200);
    pinMode(HEATER_PWM_PIN, OUTPUT);
    
    Serial.println("System Initializing...");
    delay(2000); // Allow MAX6675 to stabilize
}

void loop() {
    float temperature = readTemperature();
    Serial.print("Current Temperature: ");
    Serial.println(temperature);

    float heaterPower = calculatePID(temperature);
    analogWrite(HEATER_PWM_PIN, heaterPower); // Apply PWM to HW532

    Serial.print("PWM Output: ");
    Serial.println(heaterPower);

    delay(1000); // Adjust loop timing for stability
}









// ------------------------------------------------ CONTROLLER WITH FUZZY LOGIC ----------------------------------------------------------------

#include "max6675.h"
#include "Fuzzy.h" // Use EFLL Fuzzy Logic Library

// MAX6675 (Thermocouple) Pins
#define MAX6675_CS 10
#define MAX6675_SO 12
#define MAX6675_SCK 13
#define HEATER_PWM_PIN 3

MAX6675 thermocouple(MAX6675_SCK, MAX6675_CS, MAX6675_SO);

// Initial PID Gains
float set_temperature = 200.0;
float kp = 10.0, ki = 1.5, kd = 0.8;
float e_prev = 0, integral = 0;
long prev_time = 0;

// Create Fuzzy Logic Object
Fuzzy fuzzy;

// Define Fuzzy Variables
FuzzyInput *error;
FuzzyInput *deltaError;
FuzzyOutput *kp_adjust;

// Define Fuzzy Sets
FuzzySet *negativeBig, *negativeSmall, *zero, *positiveSmall, *positiveBig;
FuzzySet *lowGain, *mediumGain, *highGain;

void setupFuzzy() {
    error = new FuzzyInput(1);
    negativeBig = new FuzzySet(-50, -30, -20, -10);
    negativeSmall = new FuzzySet(-15, -10, -5, 0);
    zero = new FuzzySet(-5, 0, 0, 5);
    positiveSmall = new FuzzySet(0, 5, 10, 15);
    positiveBig = new FuzzySet(10, 20, 30, 50);
    error->addFuzzySet(negativeBig);
    error->addFuzzySet(negativeSmall);
    error->addFuzzySet(zero);
    error->addFuzzySet(positiveSmall);
    error->addFuzzySet(positiveBig);
    fuzzy.addFuzzyInput(error);

    kp_adjust = new FuzzyOutput(1);
    lowGain = new FuzzySet(5, 7, 8, 10);
    mediumGain = new FuzzySet(8, 10, 12, 15);
    highGain = new FuzzySet(12, 15, 18, 20);
    kp_adjust->addFuzzySet(lowGain);
    kp_adjust->addFuzzySet(mediumGain);
    kp_adjust->addFuzzySet(highGain);
    fuzzy.addFuzzyOutput(kp_adjust);

    // Define Fuzzy Rules
    FuzzyRuleAntecedent *ifErrorNegativeBig = new FuzzyRuleAntecedent();
    ifErrorNegativeBig->joinSingle(negativeBig);
    FuzzyRuleConsequent *thenHighGain = new FuzzyRuleConsequent();
    thenHighGain->addOutput(highGain);
    FuzzyRule *rule1 = new FuzzyRule(1, ifErrorNegativeBig, thenHighGain);
    fuzzy.addFuzzyRule(rule1);

    FuzzyRuleAntecedent *ifErrorNegativeSmall = new FuzzyRuleAntecedent();
    ifErrorNegativeSmall->joinSingle(negativeSmall);
    FuzzyRuleConsequent *thenMediumGain = new FuzzyRuleConsequent();
    thenMediumGain->addOutput(mediumGain);
    FuzzyRule *rule2 = new FuzzyRule(2, ifErrorNegativeSmall, thenMediumGain);
    fuzzy.addFuzzyRule(rule2);

    FuzzyRuleAntecedent *ifErrorZero = new FuzzyRuleAntecedent();
    ifErrorZero->joinSingle(zero);
    FuzzyRuleConsequent *thenLowGain = new FuzzyRuleConsequent();
    thenLowGain->addOutput(lowGain);
    FuzzyRule *rule3 = new FuzzyRule(3, ifErrorZero, thenLowGain);
    fuzzy.addFuzzyRule(rule3);

    FuzzyRuleAntecedent *ifErrorPositiveSmall = new FuzzyRuleAntecedent();
    ifErrorPositiveSmall->joinSingle(positiveSmall);
    FuzzyRule *rule4 = new FuzzyRule(4, ifErrorPositiveSmall, thenMediumGain);
    fuzzy.addFuzzyRule(rule4);

    FuzzyRuleAntecedent *ifErrorPositiveBig = new FuzzyRuleAntecedent();
    ifErrorPositiveBig->joinSingle(positiveBig);
    FuzzyRule *rule5 = new FuzzyRule(5, ifErrorPositiveBig, thenHighGain);
    fuzzy.addFuzzyRule(rule5);
}

float readTemperature() {
    float temperature = thermocouple.readCelsius();
    return (temperature < 0) ? 0.0 : temperature;
}

float calculatePID(float temperature) {
    long current_time = millis();
    float deltaT = (current_time - prev_time) / 1000.0;
    prev_time = current_time;
    if (deltaT == 0) deltaT = 0.01;

    float errorValue = set_temperature - temperature;

    // Apply Fuzzy Logic to Adjust kp
    fuzzy.setInput(1, errorValue);
    fuzzy.fuzzify();
    kp = fuzzy.defuzzify(1); // Adjust kp dynamically

    // PID Calculation
    float P = kp * errorValue;
    integral += errorValue * deltaT;
    integral = constrain(integral, -255 / ki, 255 / ki);
    float I = ki * integral;
    float D = kd * (errorValue - e_prev) / deltaT;
    e_prev = errorValue;

    float output = P + I + D;
    return constrain(output, 0, 255);
}

void setup() {
    Serial.begin(115200);
    pinMode(HEATER_PWM_PIN, OUTPUT);
    setupFuzzy();
}

void loop() {
    float temperature = readTemperature();
    Serial.print("Temperature: ");
    Serial.println(temperature);

    float heaterPower = calculatePID(temperature);
    analogWrite(HEATER_PWM_PIN, heaterPower);

    Serial.print("PWM Output: ");
    Serial.println(heaterPower);
    delay(1000);
}
